{"version":3,"sources":["../../../api/server/controllers/UserController.js"],"names":["util","Util","hashPassword","AuthHelper","comparePassword","UserController","req","res","body","email","first_name","last_name","address","phone_number","password","is_admin","hashedPassword","UserService","getUserByEmail","theUser","setError","send","newUser","signUp","createdUser","getUserById","id","token","jwt","sign","process","env","SECRET_KEY","expiresIn","Object","assign","undefined","setSuccess","message","checkPass","userData"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport UserService from '../services/UserService';\nimport Util from '../utils/Utils';\nimport AuthHelper from '../helpers/AuthHelper';\n\nconst util = new Util();\nconst { hashPassword, comparePassword } = AuthHelper;\n\nclass UserController {\n  static async signUp(req, res) {\n    const { email, first_name, last_name, address, phone_number, password, is_admin } = req.body;\n    const hashedPassword = hashPassword(password);\n    const theUser = await UserService.getUserByEmail(email);\n    if (!email || !first_name || !last_name || !address || !phone_number || !password || !is_admin) {\n      util.setError(400, 'Please provide complete details');\n      return util.send(res);\n    } else if (theUser){\n      util.setError(400, `The email ${email} is already in use`);\n      return util.send(res);\n    }\n    req.body.password = hashedPassword;\n    const newUser = req.body;\n    try {\n      let createdUser = await UserService.signUp(newUser);\n      const id = await UserService.getUserById(createdUser.id);\n      const token = jwt.sign({ id: id }, process.env.SECRET_KEY, { expiresIn: '24h' });\n      createdUser = Object.assign({ token }, req.body);\n      createdUser.password = undefined;\n      util.setSuccess(201, 'User Added!', createdUser);\n      return util.send(res);\n    } catch (error) {\n      util.setError(400, error.message);\n      return util.send(res);\n    }\n  }\n\n  static async signIn(req, res) {\n    const { email, password } = req.body;\n    const theUser = await UserService.getUserByEmail(email);\n    if (!theUser){\n      util.setError(400, `The email ${email} does not exist. Please register first.`);\n      return util.send(res);\n    }\n    try {\n      const checkPass =  comparePassword(password, theUser.password);\n      if (!checkPass) {\n        util.setError(400, `Invalid email or password.`);\n        return util.send(res);\n      } else {\n        const token = jwt.sign({ id: theUser.id }, process.env.SECRET_KEY, { expiresIn: '24h' });\n        const userData = Object.assign({ token }, req.body);\n        userData.password = undefined;\n        util.setSuccess(201, `Welcome, ${theUser.first_name} ${theUser.last_name}!`, userData);\n        return util.send(res);\n      }\n    } catch (error) {\n      util.setError(400, error.message);\n      return util.send(res);\n    }\n  }\n}\n\nexport default UserController;\n"],"file":"UserController.js"}