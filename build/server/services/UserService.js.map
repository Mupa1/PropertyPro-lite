{"version":3,"sources":["../../../api/server/services/UserService.js"],"names":["UserService","newUser","database","User","create","email","findOne","where","theUser","id","Number"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;mHACgBC,O;;;;;;;uBAEHC,mBAASC,IAAT,CAAcC,MAAd,CAAqBH,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;4HAMWI,K;;;;;;;;uBAEFH,mBAASC,IAAT,CAAcG,OAAd,CAAsB;AAC1CC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,KAAK,EAAEA;AAAT;AADmC,iBAAtB,C;;;AAAhBG,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;yHAMcC,E;;;;;;;;uBAECP,mBAASC,IAAT,CAAcG,OAAd,CAAsB;AAC1CC,kBAAAA,KAAK,EAAE;AAAEE,oBAAAA,EAAE,EAAEC,MAAM,CAACD,EAAD;AAAZ;AADmC,iBAAtB,C;;;AAAhBD,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;;eAQER,W","sourcesContent":["import database from '../src/models';\n\nclass UserService {\n  static async signUp(newUser) {\n    try {\n      return await database.User.create(newUser);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getUserByEmail(email) {\n    try {\n      const theUser = await database.User.findOne({\n        where: { email: email }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getUserById(id) {\n    try {\n      const theUser = await database.User.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n\nexport default UserService;\n"],"file":"UserService.js"}