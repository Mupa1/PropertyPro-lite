{"version":3,"sources":["../../../api/server/services/PropertyService.js"],"names":["PropertyService","newProperty","database","Property","create","findAll","id","updateProperty","findOne","where","Number","propertyToUpdate","update","theProperty","propertyToDelete","destroy","deleteProperty"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,e;;;;;;;;wHACqBC,W;;;;;;;uBAERC,mBAASC,QAAT,CAAkBC,MAAlB,CAAyBH,WAAzB,C;;;;;;;;;;;AAGd;;;;;;;;;;;;;;;;;;;;;;;;;;uBAKcC,mBAASC,QAAT,CAAkBE,OAAlB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;6HAMWC,E,EAAIC,e;;;;;;;;uBAEGL,mBAASC,QAAT,CAAkBK,OAAlB,CAA0B;AACvDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADgD,iBAA1B,C;;;AAAzBK,gBAAAA,gB;;qBAIFA,gB;;;;;;uBACIT,mBAASC,QAAT,CAAkBS,MAAlB,CAAyBL,eAAzB,EAAyC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAzC,C;;;kDAECC,e;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;0HAMeD,E;;;;;;;;uBAEIJ,mBAASC,QAAT,CAAkBK,OAAlB,CAA0B;AAClDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD2C,iBAA1B,C;;;AAApBO,gBAAAA,W;kDAICA,W;;;;;;;;;;;;;;;;;;;;;;;;4HAMiBP,E;;;;;;;;;uBAEOJ,mBAASC,QAAT,CAAkBK,OAAlB,CAA0B;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAA1B,C;;;AAAzBQ,gBAAAA,gB;;qBAEFA,gB;;;;;;uBAC2BZ,mBAASC,QAAT,CAAkBY,OAAlB,CAA0B;AACrDN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD8C,iBAA1B,C;;;AAAvBU,gBAAAA,gB;kDAGCA,gB;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEhB,e","sourcesContent":["import database from '../src/models';\n\nclass PropertyService {\n  static async addProperty(newProperty) {\n    try {\n      return await database.Property.create(newProperty);\n    } catch (error) {\n      throw error;\n    };\n  }\n\n  static async getAllProperties() {\n    try {\n      return await database.Property.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateProperty(id, updateProperty) {\n    try {\n      const propertyToUpdate = await database.Property.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (propertyToUpdate) {\n        await database.Property.update(updateProperty, { where: { id: Number(id) } });\n\n        return updateProperty;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAProperty(id) {\n    try {\n      const theProperty = await database.Property.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theProperty;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteProperty(id) {\n    try {\n      const propertyToDelete = await database.Property.findOne({ where: { id: Number(id) } });\n\n      if (propertyToDelete) {\n        const deleteProperty = await database.Property.destroy({\n          where: { id: Number(id) }\n        });\n        return deleteProperty;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default PropertyService;\n"],"file":"PropertyService.js"}