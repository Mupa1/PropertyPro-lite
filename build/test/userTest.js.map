{"version":3,"sources":["../../api/test/userTest.js"],"names":["chai","use","chatHttp","expect","describe","user","email","first_name","last_name","address","phone_number","password","is_admin","it","done","request","app","post","set","send","end","err","res","status","to","equal","body","have","property","data","include","should","eql","userSignin"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../index';\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\n/* Signup tests */\ndescribe('Testing the user endpoints:', () => {\n  const user = {\n    email: 'testing@mail.com',\n    first_name: 'mary',\n    last_name: 'kavutha',\n    address: 'nairobi',\n    phone_number: '123456789',\n    password: '123456',\n    is_admin: 'false'\n  };\n\n  it('It should create a user', (done) => {\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .set('Accept', 'application/json')\n      .send(user)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body).to.have.property('data').have.property('token');\n        expect(res.body.data).to.include({\n          email: user.email,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          address: user.address,\n          phone_number: user.phone_number,\n          is_admin: user.is_admin,\n        });\n\n        done();\n      });\n  });\n\n  it('It should not create the same users twice', (done) => {\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .set('Accept', 'application/json')\n      .send(user)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n          .eql(`The email ${user.email} is already in use`);\n        done();\n      });\n  });\n\n  it('It should not create a user with incomplete parameters', (done) => {\n    const user = {\n      email: 'testing@mail.com',\n      first_name: 'mary',\n      last_name: 'kavutha',\n      address: 'nairobi',\n      phone_number: '123456789',\n      password: '123456',\n    };\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .set('Accept', 'application/json')\n      .send(user)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n          .eql(`Please provide complete details`);\n        done();\n      });\n  });\n\n  /* Signin tests */\n  it('It should signin a registered user', (done) => {\n    const userSignin = {\n      email: 'testing@mail.com',\n      password: '123456'\n    };\n    chai.request(app)\n      .post('/api/v1/users/signin')\n      .set('Accept', 'application/json')\n      .send(userSignin)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        res.body.should.have.property('message');\n        done();\n      });\n  });\n\n  it('It should not signin an unregistered user', (done) => {\n    const userSignin = {\n      email: 'test@gmail.com',\n      password: '1234'\n    };\n    chai.request(app)\n      .post('/api/v1/users/signin')\n      .set('Accept', 'application/json')\n      .send(userSignin)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n          .eql(`The email ${userSignin.email} does not exist. Please register first.`);\n        done();\n      });\n  });\n\n  it('It should not signin a registered user using wrong password', (done) => {\n    const userSignin = {\n      email: 'testing@mail.com',\n      password: '1234'\n    };\n    chai.request(app)\n      .post('/api/v1/users/signin')\n      .set('Accept', 'application/json')\n      .send(userSignin)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n          .eql(`Invalid email or password.`);\n        done();\n      });\n  });\n});\n"],"file":"userTest.js"}